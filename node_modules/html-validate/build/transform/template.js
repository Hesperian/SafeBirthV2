"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const espree = require("espree");
const fs = require('fs');
const walk = require("acorn-walk");
function joinTemplateLiteral(nodes) {
    let offset = nodes[0].start;
    let output = '';
    for (const node of nodes) {
        output += ' '.repeat(node.start - offset);
        output += node.value.raw;
        offset = node.end;
    }
    return output;
}
function extractLiteral(node) {
    switch (node.type) {
        case 'Literal':
            return {
                data: node.value.toString(),
                filename: null,
                line: node.loc.start.line,
                column: node.loc.start.column + 1,
            };
        case 'TemplateLiteral':
            return {
                data: joinTemplateLiteral(node.quasis),
                filename: null,
                line: node.loc.start.line,
                column: node.loc.start.column + 1,
            };
        case 'TaggedTemplateExpression':
            return {
                data: joinTemplateLiteral(node.quasi.quasis),
                filename: null,
                line: node.quasi.loc.start.line,
                column: node.quasi.loc.start.column + 1,
            };
        default:
            throw Error(`Unhandled node type "${node.type}" in extractLiteral`);
    }
}
function compareKey(node, key) {
    switch (node.type) {
        case "Identifier":
            return node.name === key;
        default:
            throw Error(`Unhandled node type "${node.type}" in compareKey`);
    }
}
class TemplateExtractor {
    constructor(ast, filename) {
        this.ast = ast;
        this.filename = filename;
    }
    static fromFilename(filename) {
        const source = fs.readFileSync(filename);
        const ast = espree.parse(source, {
            ecmaVersion: 2017,
            sourceType: "module",
            loc: true,
        });
        return new TemplateExtractor(ast, filename);
    }
    static fromString(source, filename) {
        const ast = espree.parse(source, {
            ecmaVersion: 2017,
            sourceType: "module",
            loc: true,
        });
        return new TemplateExtractor(ast, filename || 'inline');
    }
    extractObjectProperty(key) {
        const result = [];
        const filename = this.filename;
        walk.simple(this.ast, {
            Property(node) {
                if (compareKey(node.key, key)) {
                    const source = extractLiteral(node.value);
                    source.filename = filename;
                    result.push(source);
                }
            },
        });
        return result;
    }
}
exports.TemplateExtractor = TemplateExtractor;
