import { MetaTable } from '../meta';
import { ConfigData } from './config-data';
import { Source } from '../context';
import { RuleConstructor } from '../rule';
declare type Transformer = {
    pattern: RegExp;
    fn: (filename: string) => Source[];
};
interface Plugin {
    rules: {
        [key: string]: RuleConstructor;
    };
}
export declare class Config {
    private config;
    protected metaTable: MetaTable;
    protected plugins: Plugin[];
    protected transformers: Transformer[];
    protected rootDir: string;
    static readonly SEVERITY_DISABLED = 0;
    static readonly SEVERITY_WARN = 1;
    static readonly SEVERITY_ERROR = 2;
    static empty(): Config;
    static fromObject(options: ConfigData): Config;
    static fromFile(filename: string): Config;
    static defaultConfig(): Config;
    constructor(options?: ConfigData);
    init(): void;
    merge(rhs: Config): Config;
    getMetaTable(): MetaTable;
    static expandRelative(src: string, currentPath: string): string;
    private mergeInternal;
    get(): ConfigData;
    getRules(): {
        [key: string]: number | "off" | "warn" | "error" | [number | "off" | "warn" | "error"] | [number | "off" | "warn" | "error", any];
    };
    getPlugins(): Plugin[];
    private loadPlugins;
    transform(filename: string): Source[];
    private findTransformer;
    private precompileTransformers;
    private findRootDir;
}
export {};
