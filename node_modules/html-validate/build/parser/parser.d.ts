import { Config } from '../config';
import { DOMNode, DOMTree } from '../dom';
import { Source } from '../context';
import { Token, TokenStream, TokenType } from '../lexer';
import { EventCallback } from '../event';
import { Event, AttributeEvent, ConditionalEvent, DirectiveEvent, DOMReadyEvent, DoctypeEvent, TagCloseEvent, TagOpenEvent, WhitespaceEvent } from '../event';
export declare class Parser {
    private readonly config;
    private readonly event;
    private readonly metaTable;
    private dom;
    constructor(config: Config);
    parseHtml(source: string | Source): DOMTree;
    private closeOptional;
    private consumeTag;
    consumeAttribute(node: DOMNode, token: Token, next?: Token): void;
    consumeDirective(token: Token): void;
    consumeDoctype(startToken: Token, tokenStream: TokenStream): void;
    consumeUntil(tokenStream: TokenStream, search: TokenType): IterableIterator<Token>;
    private next;
    on(event: string, listener: EventCallback): () => void;
    once(event: string, listener: EventCallback): () => void;
    defer(cb: () => void): void;
    protected trigger(event: 'tag:open', data: TagOpenEvent): void;
    protected trigger(event: 'tag:close', data: TagCloseEvent): void;
    protected trigger(event: 'dom:load', data: Event): void;
    protected trigger(event: 'dom:ready', data: DOMReadyEvent): void;
    protected trigger(event: 'doctype', data: DoctypeEvent): void;
    protected trigger(event: 'attr', data: AttributeEvent): void;
    protected trigger(event: 'whitespace', data: WhitespaceEvent): void;
    protected trigger(event: 'conditional', data: ConditionalEvent): void;
    protected trigger(event: 'directive', data: DirectiveEvent): void;
    private closeTree;
}
