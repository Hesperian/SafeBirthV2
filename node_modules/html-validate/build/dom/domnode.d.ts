import { Location } from '../context';
import { Token } from '../lexer';
import { DOMTokenList } from './domtokenlist';
import { MetaTable, MetaElement } from '../meta';
import { Attribute } from './attribute';
export declare enum NodeClosed {
    Open = 0,
    EndTag = 1,
    VoidOmitted = 2,
    VoidSelfClosed = 3,
    ImplicitClosed = 4
}
export declare function reset(): void;
export declare class DOMNode {
    readonly nodeName: string;
    readonly tagName: string;
    readonly attr: {
        [key: string]: Attribute;
    };
    readonly children: Array<DOMNode>;
    readonly location: Location;
    readonly meta: MetaElement;
    readonly parent: DOMNode;
    readonly voidElement: boolean;
    readonly unique: number;
    readonly depth: number;
    closed: NodeClosed;
    constructor(tagName: string, parent?: DOMNode, closed?: NodeClosed, meta?: MetaElement, location?: Location);
    static rootNode(location: Location): DOMNode;
    static fromTokens(startToken: Token, endToken: Token, parent: DOMNode, metaTable: MetaTable): DOMNode;
    is(tagName: string): boolean;
    isRootElement(): boolean;
    setAttribute(key: string, value: string, location: Location): void;
    hasAttribute(key: string): boolean;
    getAttribute(key: string): Attribute;
    getAttributeValue(key: string): string;
    append(node: DOMNode): void;
    readonly classList: DOMTokenList;
    readonly id: string;
    readonly siblings: DOMNode[];
    readonly previousSibling: DOMNode;
    readonly nextSibling: DOMNode;
    getElementsByTagName(tagName: string): Array<DOMNode>;
    querySelector(selector: string): DOMNode;
    querySelectorAll(selector: string): DOMNode[];
    private querySelectorImpl;
    visitDepthFirst(callback: (node: DOMNode) => void): void;
    someChildren(callback: (node: DOMNode) => boolean): boolean;
    everyChildren(callback: (node: DOMNode) => boolean): boolean;
    find(callback: (node: DOMNode) => boolean): DOMNode;
}
