import { Config } from "../config";
import { Source } from "../context";
import { Parser } from "../parser";
import { Reporter, Report } from "../reporter";
import { Rule, RuleConstructor, RuleOptions } from "../rule";
export interface EventDump {
    event: string;
    data: string;
}
export interface TokenDump {
    token: string;
    data: string;
    location: string;
}
export declare class Engine<T extends Parser = Parser> {
    protected report: Reporter;
    protected config: Config;
    protected ParserClass: new (config: Config) => T;
    protected availableRules: {
        [key: string]: RuleConstructor;
    };
    constructor(config: Config, ParserClass: new (config: Config) => T);
    lint(sources: Source[]): Report;
    dumpEvents(source: Source[]): EventDump[];
    dumpTokens(source: Source[]): TokenDump[];
    dumpTree(source: Source[]): string[];
    private processDirective;
    private processEnableDirective;
    private processDisableDirective;
    private processDisableBlockDirective;
    private processDisableNextDirective;
    protected loadRule(name: string, data: any, parser: Parser, report: Reporter): Rule;
    protected instantiateRule(name: string, options: RuleOptions): Rule;
    protected requireRule(name: string, options: RuleOptions): any;
    private missingRule;
    private reportError;
}
